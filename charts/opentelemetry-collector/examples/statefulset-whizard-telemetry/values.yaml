mode: statefulset

global:
  imageRegistry: ""

image:
  repository: "otel/opentelemetry-collector-contrib"
  tag: "0.109.0"

command:
  name: "otelcol-contrib"

service:
  type: NodePort

ports:
  otlp:
    enabled: true
    containerPort: 4317
    servicePort: 4317
    hostPort: 4317
    protocol: TCP
    nodePort: 30317
    appProtocol: grpc
  otlp-http:
    enabled: true
    containerPort: 4318
    servicePort: 4318
    hostPort: 4318
    nodePort: 30318
    protocol: TCP
  # add otel tcplog receiver: https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/receiver/tcplogreceiver
  otlp-tcplog: 
    enabled: true
    containerPort: 5318
    servicePort: 5318
    hostPort: 5318
    nodePort: 35318
    protocol: TCP

  jaeger-compact:
    enabled: false
  jaeger-thrift:
    enabled: false
  jaeger-grpc:
    enabled: false
  zipkin:
    enabled: false

resources:
  limits:
    cpu: 1 
    memory: 1024Mi
  requests:
    cpu: 50m
    memory: 100Mi 

statefulset:
  # volumeClaimTemplates for a statefulset
  volumeClaimTemplates:
  - metadata:
      name: prometheus 
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
  podManagementPolicy: "Parallel"
  # Controls if and how PVCs created by the StatefulSet are deleted. Available in Kubernetes 1.23+.
  persistentVolumeClaimRetentionPolicy:
    enabled: true
    whenDeleted: Delete
    whenScaled: Retain

extraVolumeMounts:
- name: prometheus
  mountPath: /prometheus/wal

config:
  exporters:
    otlp/signoz:
      endpoint: my-release-signoz-otel-collector.platform.svc:4317
    ## Refer to https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/debugexporter for more detailes.
    debug:
      #verbosity: detailed
      verbosity: basic
      sampling_initial: 2 
      sampling_thereafter: 1
#    ## Refer to https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/exporter/prometheusremotewriteexporter for more details.
#    prometheusremotewrite:
#      endpoint: <YOUR_PROMETHEUS_REMOTE_WRITE_URL>
#      wal: # Enabling the Write-Ahead-Log for the exporter.
#        directory: /prometheus/wal
#      add_metric_suffixes: false
#      external_labels:
#        cluster: <cluster_name>
#      # Refer to https://github.com/open-telemetry/opentelemetry-collector/blob/main/config/configtls/README.md#client-configuration for more details
#      tls:
#        insecure: true
#    ## Refer to https://github.com/open-telemetry/opentelemetry-collector/tree/main/exporter/otlpexporter for more details
#    otlp:
#      ## url of a tracing backend like tempo or jaeger
#      endpoint: <YOUR_OTLP_URL:4317>
#      headers:
#        x-scope-orgid: whizard-tracing-for-ks
  processors:
    batch: {}
    memory_limiter:
      # 80% of maximum memory up to 2G
      limit_mib: 1500
      # 25% of limit up to 2G
      spike_limit_mib: 512
      check_interval: 5s
    attributes:
      actions:
        - key: wiz.cluster.name
          action: insert
          value: "<cluster-name>"
  receivers:
    tcplog:
      endpoint: ${env:MY_POD_IP}:5318
    ## Only keep the otlp receiver in the default values
    jaeger: null
    prometheus: null
    zipkin: null
  service:
    pipelines:
      traces:
        receivers: [ otlp ]
        processors: [ memory_limiter, batch, attributes ]
        exporters:
          # - otlp
          - debug
      metrics:
        receivers: [ otlp ]
        processors: [ memory_limiter, batch, attributes ]
        exporters:
          # - prometheusremotewrite
          - debug
      logs:
        exporters:
          - otlp/signoz
        processors:
          - memory_limiter
          - batch
        receivers:
          - tcplog
